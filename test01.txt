Hello Git!

master	：默认开发分支
origin	：默认远程版本库
Head	：默认开发分支
Head^	：Head的父提交

创建版本库
$ git clone <url>	#克隆远程版本库
$ git init 		#初始化本地版本库

修改和提交
$ git status	#查看状态
$ git diff		#查看变更内容
$ git add . 	#跟踪所有改动过的文件 
$ git add <file>	#跟踪指定的文件
$ git mv <old> <new>	#文件改名
$ git rm <file>		#删除文件
$ git rm --cached <file>	#停止跟踪文件但不删除
$ git commit -m "commit message"	#提交所有更新过的文件
$ git commit --amend		#修改最后一次提交

查看提交历史
$ git log			#查看提交历史
$ git log -p <file>		#查看指定文件的提交历史
$ git blame <file>		#以列表方式查看指定文件的提交历史

撤销
$ git reset --hard HEAD	#撤销工作目录中所有未提交文件的修改内容
$ git checkout HEAD <file>	#撤销指定的未提交文件的修改内容
$ git revert <commit>	#撤销指定的提交

分支与标签
$ git branch 			#显示所有本地分支
$ git checkout <branch/tag>	#切换到指定分支或标签
$ git branch <new-branch>		#创建新分支
$ git branch -d <branch>		#删除本地分支
$ git tag				#列出所有本地标签
$ git tag <tagname>		#基于最新提交创建标签
$ git tag -d <tagname>		#删除标签

合并与衍合
$ git merge <branch>		#合并指定分支到当前分支
$ git rebase <branch>		#衍合指定分支到当前分支

远程操作
$ git remote -v 			#查看远程版本库信息
$ git remote show <remote>	#查看指定远程版本库信息
$ git remote add <remote> <url>	#添加远程版本库
$ git fetch <remote>		#从远程库获取代码
$ git pull <remote> <branch>	#下载代码及快速合并
$ git push <remote> <branch>	#上传代码及快速合并
$ git push <remote> :<branch/tag-name>	#删除远程分支或标签
$ gti push --tags			#上传所有标签 

常用命令：
pwd（print the working directory）显示当前目录
ls（list）查看当前目录下所有的文件
clear 清空当前命令行窗口
cd ../ 回到上一级目录
mkdir test (make directory) 在当前目录下创建一个叫做test的目录
cd test（change directory）进入到当前目录下的test目录
git 中的命令在Windows进到test的目录中，创建了test.txt，写上hello git！
git init	初始化 代码仓库（会覆盖掉之前的配置信息）
git status  查看当前仓库的状态
git add test.txt  将test.txt文档添加到代码仓库
git commit -m "注释说明"  提交到本地

提交到服务器：
配置用户名和邮箱：
$ git config --global user.name "ChandaLenn"
$ git config --global user.email "1552885458@qq.com"

添加服务器的代码仓库的地址
$ git remote add origin
http://github.com/ChandaLenn/test.git

将当前的代码仓库推送到服务器端的master分支
输入github账号的用户名和密码
$ git push origin master





